---
title: ""
format: dashboard
---


```{r}
#| include: false
lapply(list.files("./R", full.names = TRUE), source, encoding = "UTF-8")
```

```{r}
#| include: false
#| echo: false
#| warning: false
eurcop_df <- ingest_all_rds() |> 
  dplyr::group_by(timestamp) |> 
  dplyr::mutate(
    EC = max(vctrs::vec_slice(rate, direction == "EUR -> COP"), na.rm = TRUE),
    CE = min(vctrs::vec_slice(rate, direction == "COP -> EUR"), na.rm = TRUE),
    spread = EC - CE,
    spread_p = 100 * (spread / CE) # EC/CE-1
  )  |> 
  # dplyr::mutate(
  #   spread = 
  #     max(vctrs::vec_slice(rate, direction == "EUR -> COP"), na.rm = TRUE) - 
  #     min(vctrs::vec_slice(rate, direction == "COP -> EUR"), na.rm = TRUE)
  # )  |> 
  dplyr::ungroup()
```

## Row

### Column {width="60%"}


```{r}
#| label: rates-dygraphs-plot
#| echo: false

rates_df <- eurcop_df |> 
  dplyr::select(timestamp, source, rate) |> 
  tidyr::pivot_wider(
    names_from = source, 
    values_from = rate, 
    values_fn = mean # to deal with those cases where id_cols and names_from 
    # columns does not uniquely identify an observation. Not sure how it 
    # happened, but there are a few where we have for the same source,
    # more than one observation with the same timestamp
  )

rates_xts <- xts::xts(
  x = rates_df |> dplyr::select(-timestamp) |> as.data.frame(), 
  order.by = rates_df$timestamp
)

rates_dy <- 
  dygraphs::dygraph(
  	data = rates_xts,
  	group = "eurcop_plot"
  ) |> 
  dygraphs::dyAxis(name = "x", rangePad = 5) |>
  dygraphs::dyLegend(width = 700) |>
  dygraphs::dyOptions(drawPoints = TRUE, pointSize = 2) |>
  dygraphs::dyRangeSelector() |>
  dygraphs::dyHighlight(
    highlightCircleSize = 5,
    highlightSeriesBackgroundAlpha = 0.2,
    hideOnMouseOut = TRUE
  )

rates_dy$x$css <- 
  ".dygraph-legend > span {display:none;}
   .dygraph-legend > span.highlight { display: inline; float: right}
  "
rates_dy
```

### Column {width="20%"}

```{r}
eurcop_df |> 
dplyr::slice_max(order_by = timestamp, n = 1) |> 
dplyr::filter(direction == "COP -> EUR") |> 
dplyr::filter(!is.na(rate)) |> 
dplyr::arrange(rate) |> 
dplyr::select(source, rate)  |> 
dplyr::mutate(rate = format(rate, big.mark = ",", digits = 1)) |> 
knitr::kable()
```

### Column {width="20%"}

```{r}
eurcop_df |> 
dplyr::slice_max(order_by = timestamp, n = 1) |> 
dplyr::filter(direction == "EUR -> COP") |> 
dplyr::filter(!is.na(rate)) |> 
dplyr::arrange(dplyr::desc(rate)) |> 
dplyr::select(source, rate) |> 
dplyr::mutate(rate = format(rate, big.mark = ",", digits = 1)) |> 
knitr::kable()
```


## Row

### Column {width="60%"}

```{r}
#| label: spread-dygraphs-plot
#| echo: false

dyBarChart <- function(dygraph) {
  dygraphs::dyPlotter(dygraph = dygraph,
            name = "BarChart",
            path = system.file("plotters/barchart.js",
                               package = "dygraphs"))
}

spread_df <- eurcop_df |> 
  dplyr::group_by(timestamp) |> 
  dplyr::summarize(spread_p = mean(spread_p, na.rm = TRUE))

spread_xts <- xts::xts(
  x = spread_df|> dplyr::select(-timestamp), 
  order.by = spread_df$timestamp
)

spread_dy <- 
  dygraphs::dygraph(
  	data = spread_xts,
  	group = "eurcop_plot"
  ) |>
  dygraphs::dyAxis(name = "x", rangePad = 5) |>
  dygraphs::dyLegend(width = 700) |>
  dygraphs::dyOptions(drawPoints = TRUE, pointSize = 2) |>
  dygraphs::dyRangeSelector() |>
  dygraphs::dyHighlight(
    highlightCircleSize = 5,
    highlightSeriesBackgroundAlpha = 0.3,
    hideOnMouseOut = TRUE
  ) |> 
  dyBarChart()

spread_dy$x$css <- 
  ".dygraph-legend > span {display:none;}
   .dygraph-legend > span.highlight { display: inline; float: right}
  "
spread_dy
```

### Column {width="20%"}

```{r}
eurcop_df |> 
dplyr::slice_max(order_by = timestamp, n = 1) |> 
dplyr::filter(direction == "COP -> EUR") |> 
dplyr::filter(!is.na(rate)) |> 
dplyr::arrange(rate) |> 
dplyr::select(source, rate)  |> 
dplyr::mutate(rate = format(rate, big.mark = ",", digits = 1)) |> 
knitr::kable()
```

### Column {width="20%"}

```{r}
eurcop_df |> 
dplyr::slice_max(order_by = timestamp, n = 1) |> 
dplyr::filter(direction == "EUR -> COP") |> 
dplyr::filter(!is.na(rate)) |> 
dplyr::arrange(dplyr::desc(rate)) |> 
dplyr::select(source, rate) |> 
dplyr::mutate(rate = format(rate, big.mark = ",", digits = 1)) |> 
knitr::kable()
```
